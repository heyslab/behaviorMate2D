// C++ style '//' comments are permitted to comment out the end of lines
// but block style i.e. '/*' will not work
{
    "random_foraging_task": { // name for each profile of in this setting file
        "controllers": {
            "behavior_controller": {
                "ip": "192.168.1.101",
                "send_port": 5001,
                "receive_port": 5000
            },
            "position_controller": {
                "ip": "192.168.1.102",
                "send_port": 5005,
                "receive_port": 5005
            }
        },
        "reward": {
            "id": "reward" //should match the id of the "reward" context
        },
        // "sensors" is a list of all the sensors that need to be configured on
        // the behavior arduino. See sensor manager class in behavior
        // controller. Default sensor type is to read a ttl pulse/square wave
        // input. a lickport type context  is necessary for rewarding contexts.
        "sensors": [
            {
                "type": "cap1188",
                "pin": 3,
                "lights": true,
                "sensitivity": 6,
                "reset_pin": 5
            },
            {
                "pin": 15 // for a TTL pulse sensor all that is needed is pin
            }
        ],
        // "contexts" are time/space localized events that can be configured to
        // occur along the track. See Context Manager in the behavior arduino
        // code for more information
        "contexts": [
            // reward zones are an example of a context and can be configured
            // in this list as well.
            {
                "id": "reward",    // every context is required to have a
                                   // unique id
                "type": "operant", // specialized contexts are defined
                                   // through the type field. operant type
                                   // contexts are triggered via sensors i.e.
                                   // the lickport
                "max_duration": 15,// maximum time (in s) the context is allowed
                                   // to be active
                "valves": [52],    // list of arduino pints to activate when the
                                   // context starts
                "durations": [60], // list of times to open valves for
                "operant_rate": 2, // number of licks in context to receive a reward
                "radius": 50,
                "report_pin": 7,
                "initial_open": false,
                "sensor": 3, // pin number associated with the sensor to trigger
                             // operant context.
                "locations": 3,
                // "locations": [500, 1500], // integer or list. list - list of
                                             // locations to place context
                                             // centroids. integer - number of
                                             // locations to randomly shuffle
                                             // context to. absent - context is
                                             // active during entire trial
                "display_color": [104,204,104], // color to make display
                                                // indicating the location of
                                                // this context
                //"decorators": [ // uncomment to alter task behavior, in this case
                                  // blocked_shuffle would prevent the reward from
                                  // ever appearing between positions 500 and 1500
                //    {
                //        "class": "blocked_shuffle",
                //        "locations": [[500, 1500]]
                //    }
                //]
            },
            {
                "id": "tone", // play a tone from the behavior arduino
                              // tones will only work if a speaker is connected
                              // to the pin specified in "valves" (in this case pin 41)
                "type": "pulsed",   // this context will be repeatedly pulsed
                "interval": 1000,   // amount of time between pulses
                "durations": [250], // amount of time per pulse to play tone
                "valves": [41],
                "frequency": 2000,
                "locations": [1000],
                "radius": 50,
                "display_color": [0, 0, 250]
            },
            {
                "id": "timed_tone",
                "type": "pulsed",
                "interval": 1000,
                "locations": [1500],
                "radius": 60,
                "durations": [200], // units = ms
                "fixed_duration": true,
                "max_duration": 10, // units = s
                "valves": [45],
                "frequency": 2000,
                "display_color": [250, 0, 0],
                "decorators": [
                     {
                       "class": "timed_context",
                        "times": [[5, 10]],
                        "repeat": 20
                    }
                ]
            }
        ],
        "sync_pin": 23, // a ttl pulse is delivered at the beginning of each
                        // trial to the sync pin.
        "trial_length": 300, // duration (in s) of the trial.
        "position_lap_reset": false, // set true for optical lap reset
        "position_scale": 2.18, // scales the position updates from arbitrary rotary enocoder
                                // units to mm. IMPORTANT! measure this value
                                // on each rig or position updates will be
                                // wrong
        "track_length": 2000, // length of the track/treadmill belt.
        "lap_offset": 300,
        "comment_keys": { // map keyboard stroke to comment in the resulting .tdml file
            "g": "grooming"
        },
        "disable_end_dialog": false
    },
    // the _system key holds the data directory field. this does not get saved each
    // trial and needs to be set to a directory where the program can write
    // and store files. if windows, ensure to escape backslashes i.e. \\
    "_system": {
        "data_directory":"behaviorData"
    }
}
